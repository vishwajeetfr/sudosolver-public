{"ast":null,"code":"var _jsxFileName = \"/Users/vishwajeetpatil/Downloads/sudocool-master/src/containers/Controls/Controls.js\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport * as classes from \"./Controls.module.css\";\nimport { MODE_PLAY, MODE_SOLVE } from \"../../helpers/helpers\";\nimport * as sudokuActions from \"../../store/actions/sudokuActions\";\nimport * as appUIActions from \"../../store/actions/appUIactions\";\nimport Button from \"../../UI/Button/Button\";\nimport PropTypes from \"prop-types\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Controls = props => {\n  let actionBasedOnMode;\n  let controls;\n  if (props.currentMode === MODE_PLAY) {\n    actionBasedOnMode = props.solvePuzzle;\n    controls = /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        clicked: actionBasedOnMode,\n        disabled: props.isSudokuSolved,\n        children: \"Give up\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        clicked: props.setPuzzleAndSolvedPuzzle,\n        children: \"New game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  } else if (props.currentMode === MODE_SOLVE) {\n    actionBasedOnMode = props.solvePuzzleForUser;\n    controls = /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        clicked: props.setBoardToEmpty,\n        children: \"Clear All\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        clicked: actionBasedOnMode,\n        disabled: props.isSudokuSolved,\n        children: \"Solve\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.Controls,\n    children: controls\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 10\n  }, this);\n};\n_c = Controls;\nconst mapStateToProps = state => {\n  return {\n    currentMode: state.sudoku.currentMode,\n    isThereSolvedState: state.sudoku.isUserInputtedPuzzleSolvable,\n    doesUserInputtedPuzzleHaveError: state.sudoku.doesUserInputtedPuzzleHaveError,\n    isSudokuSolved: state.sudoku.isSudokuSolved\n  };\n};\nconst mapDispatchToProps = dispatch => {\n  return {\n    setPuzzleAndSolvedPuzzle: () => {\n      dispatch(appUIActions.clearActiveCell());\n      dispatch(sudokuActions.setPuzzleAndSolvedPuzzle());\n    },\n    setBoardToEmpty: () => {\n      dispatch(appUIActions.clearActiveCell());\n      dispatch(sudokuActions.initUserInputSUdokuToSolve());\n    },\n    solvePuzzle: () => {\n      dispatch(appUIActions.clearActiveCell());\n      dispatch(sudokuActions.solvePuzzle());\n    },\n    solvePuzzleForUser: () => {\n      dispatch(appUIActions.clearActiveCell());\n      dispatch(sudokuActions.solvePuzzleForUser());\n    }\n  };\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Controls);\nControls.propTypes = {\n  currentMode: PropTypes.string,\n  isThereSolvedState: PropTypes.bool,\n  doesUserInputtedPuzzleHaveError: PropTypes.bool,\n  isSudokuSolved: PropTypes.bool,\n  setPuzzleAndSolvedPuzzle: PropTypes.func,\n  setBoardToEmpty: PropTypes.func,\n  solvePuzzle: PropTypes.func,\n  solvePuzzleForUser: PropTypes.func\n};\nvar _c;\n$RefreshReg$(_c, \"Controls\");","map":{"version":3,"names":["React","connect","classes","MODE_PLAY","MODE_SOLVE","sudokuActions","appUIActions","Button","PropTypes","jsxDEV","_jsxDEV","Fragment","_Fragment","Controls","props","actionBasedOnMode","controls","currentMode","solvePuzzle","children","clicked","disabled","isSudokuSolved","fileName","_jsxFileName","lineNumber","columnNumber","setPuzzleAndSolvedPuzzle","solvePuzzleForUser","setBoardToEmpty","className","_c","mapStateToProps","state","sudoku","isThereSolvedState","isUserInputtedPuzzleSolvable","doesUserInputtedPuzzleHaveError","mapDispatchToProps","dispatch","clearActiveCell","initUserInputSUdokuToSolve","propTypes","string","bool","func","$RefreshReg$"],"sources":["/Users/vishwajeetpatil/Downloads/sudocool-master/src/containers/Controls/Controls.js"],"sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\nimport * as classes from \"./Controls.module.css\";\nimport { MODE_PLAY, MODE_SOLVE } from \"../../helpers/helpers\";\n\nimport * as sudokuActions from \"../../store/actions/sudokuActions\";\nimport * as appUIActions from \"../../store/actions/appUIactions\";\nimport Button from \"../../UI/Button/Button\";\n\nimport PropTypes from \"prop-types\";\n\nconst Controls = (props) => {\n  let actionBasedOnMode;\n  let controls;\n  if (props.currentMode === MODE_PLAY) {\n    actionBasedOnMode = props.solvePuzzle;\n    controls = (\n      <>\n        <Button clicked={actionBasedOnMode} disabled={props.isSudokuSolved}>\n          Give up\n        </Button>\n        <Button clicked={props.setPuzzleAndSolvedPuzzle}>New game</Button>\n      </>\n    );\n  } else if (props.currentMode === MODE_SOLVE) {\n    actionBasedOnMode = props.solvePuzzleForUser;\n    controls = (\n      <>\n        <Button clicked={props.setBoardToEmpty}>Clear All</Button>\n        <Button clicked={actionBasedOnMode} disabled={props.isSudokuSolved}>\n          Solve\n        </Button>\n      </>\n    );\n  }\n\n  return <div className={classes.Controls}>{controls}</div>;\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    currentMode: state.sudoku.currentMode,\n    isThereSolvedState: state.sudoku.isUserInputtedPuzzleSolvable,\n    doesUserInputtedPuzzleHaveError:\n      state.sudoku.doesUserInputtedPuzzleHaveError,\n    isSudokuSolved: state.sudoku.isSudokuSolved,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    setPuzzleAndSolvedPuzzle: () => {\n      dispatch(appUIActions.clearActiveCell());\n      dispatch(sudokuActions.setPuzzleAndSolvedPuzzle());\n    },\n    setBoardToEmpty: () => {\n      dispatch(appUIActions.clearActiveCell());\n      dispatch(sudokuActions.initUserInputSUdokuToSolve());\n    },\n    solvePuzzle: () => {\n      dispatch(appUIActions.clearActiveCell());\n      dispatch(sudokuActions.solvePuzzle());\n    },\n    solvePuzzleForUser: () => {\n      dispatch(appUIActions.clearActiveCell());\n      dispatch(sudokuActions.solvePuzzleForUser());\n    },\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Controls);\n\nControls.propTypes = {\n  currentMode: PropTypes.string,\n  isThereSolvedState: PropTypes.bool,\n  doesUserInputtedPuzzleHaveError: PropTypes.bool,\n  isSudokuSolved: PropTypes.bool,\n\n  setPuzzleAndSolvedPuzzle: PropTypes.func,\n  setBoardToEmpty: PropTypes.func,\n  solvePuzzle: PropTypes.func,\n  solvePuzzleForUser: PropTypes.func,\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}