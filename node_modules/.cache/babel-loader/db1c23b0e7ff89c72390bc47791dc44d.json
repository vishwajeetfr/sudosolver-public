{"ast":null,"code":"import * as actions from \"../actions/actionTypes\";\nimport * as sudokuReducerHelper from \"../../helpers/sudokuReducerHelper\";\nconst dafaultState = sudokuReducerHelper.defaultState;\nconst reducer = (state = dafaultState, action) => {\n  switch (action.type) {\n    case actions.SET_GAME_MODE:\n      const newStateSetNewGame = sudokuReducerHelper.setGameMode(action, state);\n      return newStateSetNewGame;\n    case actions.SET_DIFFICULTY:\n      const newStateSetDifficulty = sudokuReducerHelper.setDifficulty(action, state);\n      return newStateSetDifficulty;\n    case actions.SET_PUZZLE_AND_SOLVED_PUZZLE:\n      const newStateSetPuzzleAndSolvedPuzzle = sudokuReducerHelper.setPuzzleAndSolvedPuzzle(action, state);\n      return newStateSetPuzzleAndSolvedPuzzle;\n    case actions.SOLVE_PUZZLE:\n      const newStateSolvePuzzle = sudokuReducerHelper.solvePuzzle(action, state);\n      return newStateSolvePuzzle;\n    case actions.SET_SUDOKU_STATE:\n      const newStateSetSudokuState = sudokuReducerHelper.setSudokuState(action, state);\n      return newStateSetSudokuState;\n    case actions.SET_INVALID_CELLS:\n      const newStateSetInvalidCells = sudokuReducerHelper.setInvalidCells(action, state);\n      return newStateSetInvalidCells;\n    case actions.SET_INVALID_ROWS:\n      const newStateSetInvalidRows = sudokuReducerHelper.setInvalidRows(action, state);\n      return newStateSetInvalidRows;\n    case actions.SET_INVALID_COLUMNS:\n      const newStateSetInvalidColumns = sudokuReducerHelper.setInvalidColumns(action, state);\n      return newStateSetInvalidColumns;\n    case actions.SUDOKU_IS_SOLVED:\n      const newStateSudokuIsSolved = sudokuReducerHelper.sudokuIsSolved(action, state);\n      return newStateSudokuIsSolved;\n    case actions.SET_INVALID_BOXES_AND_NUMBERS:\n      const newStateSetInvalidBoxesAndNumbers = sudokuReducerHelper.setInvalidBoesAndNumbers(action, state);\n      return newStateSetInvalidBoxesAndNumbers;\n    case actions.SOLVE_SUDOKU_FOR_USER:\n      const newStateSolveSudokuForUser = sudokuReducerHelper.solveSudokuForUser(action, state);\n      return newStateSolveSudokuForUser;\n    case actions.INIT_USER_INPUT_SUDOKU_TO_SOLVE:\n      const newStateInitUserInputSudokuToSolve = sudokuReducerHelper.initUserInputSUdokuToSolve(action, state);\n      return newStateInitUserInputSudokuToSolve;\n    default:\n      return state;\n  }\n};\nexport default reducer;","map":{"version":3,"names":["actions","sudokuReducerHelper","dafaultState","defaultState","reducer","state","action","type","SET_GAME_MODE","newStateSetNewGame","setGameMode","SET_DIFFICULTY","newStateSetDifficulty","setDifficulty","SET_PUZZLE_AND_SOLVED_PUZZLE","newStateSetPuzzleAndSolvedPuzzle","setPuzzleAndSolvedPuzzle","SOLVE_PUZZLE","newStateSolvePuzzle","solvePuzzle","SET_SUDOKU_STATE","newStateSetSudokuState","setSudokuState","SET_INVALID_CELLS","newStateSetInvalidCells","setInvalidCells","SET_INVALID_ROWS","newStateSetInvalidRows","setInvalidRows","SET_INVALID_COLUMNS","newStateSetInvalidColumns","setInvalidColumns","SUDOKU_IS_SOLVED","newStateSudokuIsSolved","sudokuIsSolved","SET_INVALID_BOXES_AND_NUMBERS","newStateSetInvalidBoxesAndNumbers","setInvalidBoesAndNumbers","SOLVE_SUDOKU_FOR_USER","newStateSolveSudokuForUser","solveSudokuForUser","INIT_USER_INPUT_SUDOKU_TO_SOLVE","newStateInitUserInputSudokuToSolve","initUserInputSUdokuToSolve"],"sources":["/Users/vishwajeetpatil/Downloads/sudocool-master/src/store/reducers/sudokuReducer.js"],"sourcesContent":["import * as actions from \"../actions/actionTypes\";\nimport * as sudokuReducerHelper from \"../../helpers/sudokuReducerHelper\";\n\nconst dafaultState = sudokuReducerHelper.defaultState;\n\nconst reducer = (state = dafaultState, action) => {\n  switch (action.type) {\n    case actions.SET_GAME_MODE:\n      const newStateSetNewGame = sudokuReducerHelper.setGameMode(action, state);\n      return newStateSetNewGame;\n\n    case actions.SET_DIFFICULTY:\n      const newStateSetDifficulty = sudokuReducerHelper.setDifficulty(\n        action,\n        state\n      );\n      return newStateSetDifficulty;\n\n    case actions.SET_PUZZLE_AND_SOLVED_PUZZLE:\n      const newStateSetPuzzleAndSolvedPuzzle =\n        sudokuReducerHelper.setPuzzleAndSolvedPuzzle(action, state);\n      return newStateSetPuzzleAndSolvedPuzzle;\n\n    case actions.SOLVE_PUZZLE:\n      const newStateSolvePuzzle = sudokuReducerHelper.solvePuzzle(\n        action,\n        state\n      );\n      return newStateSolvePuzzle;\n\n    case actions.SET_SUDOKU_STATE:\n      const newStateSetSudokuState = sudokuReducerHelper.setSudokuState(\n        action,\n        state\n      );\n      return newStateSetSudokuState;\n\n    case actions.SET_INVALID_CELLS:\n      const newStateSetInvalidCells = sudokuReducerHelper.setInvalidCells(\n        action,\n        state\n      );\n      return newStateSetInvalidCells;\n\n    case actions.SET_INVALID_ROWS:\n      const newStateSetInvalidRows = sudokuReducerHelper.setInvalidRows(\n        action,\n        state\n      );\n      return newStateSetInvalidRows;\n\n    case actions.SET_INVALID_COLUMNS:\n      const newStateSetInvalidColumns = sudokuReducerHelper.setInvalidColumns(\n        action,\n        state\n      );\n      return newStateSetInvalidColumns;\n\n    case actions.SUDOKU_IS_SOLVED:\n      const newStateSudokuIsSolved = sudokuReducerHelper.sudokuIsSolved(\n        action,\n        state\n      );\n      return newStateSudokuIsSolved;\n\n    case actions.SET_INVALID_BOXES_AND_NUMBERS:\n      const newStateSetInvalidBoxesAndNumbers =\n        sudokuReducerHelper.setInvalidBoesAndNumbers(action, state);\n      return newStateSetInvalidBoxesAndNumbers;\n\n    case actions.SOLVE_SUDOKU_FOR_USER:\n      const newStateSolveSudokuForUser = sudokuReducerHelper.solveSudokuForUser(\n        action,\n        state\n      );\n      return newStateSolveSudokuForUser;\n\n    case actions.INIT_USER_INPUT_SUDOKU_TO_SOLVE:\n      const newStateInitUserInputSudokuToSolve =\n        sudokuReducerHelper.initUserInputSUdokuToSolve(action, state);\n      return newStateInitUserInputSudokuToSolve;\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n"],"mappings":"AAAA,OAAO,KAAKA,OAAO,MAAM,wBAAwB;AACjD,OAAO,KAAKC,mBAAmB,MAAM,mCAAmC;AAExE,MAAMC,YAAY,GAAGD,mBAAmB,CAACE,YAAY;AAErD,MAAMC,OAAO,GAAGA,CAACC,KAAK,GAAGH,YAAY,EAAEI,MAAM,KAAK;EAChD,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAKP,OAAO,CAACQ,aAAa;MACxB,MAAMC,kBAAkB,GAAGR,mBAAmB,CAACS,WAAW,CAACJ,MAAM,EAAED,KAAK,CAAC;MACzE,OAAOI,kBAAkB;IAE3B,KAAKT,OAAO,CAACW,cAAc;MACzB,MAAMC,qBAAqB,GAAGX,mBAAmB,CAACY,aAAa,CAC7DP,MAAM,EACND,KACF,CAAC;MACD,OAAOO,qBAAqB;IAE9B,KAAKZ,OAAO,CAACc,4BAA4B;MACvC,MAAMC,gCAAgC,GACpCd,mBAAmB,CAACe,wBAAwB,CAACV,MAAM,EAAED,KAAK,CAAC;MAC7D,OAAOU,gCAAgC;IAEzC,KAAKf,OAAO,CAACiB,YAAY;MACvB,MAAMC,mBAAmB,GAAGjB,mBAAmB,CAACkB,WAAW,CACzDb,MAAM,EACND,KACF,CAAC;MACD,OAAOa,mBAAmB;IAE5B,KAAKlB,OAAO,CAACoB,gBAAgB;MAC3B,MAAMC,sBAAsB,GAAGpB,mBAAmB,CAACqB,cAAc,CAC/DhB,MAAM,EACND,KACF,CAAC;MACD,OAAOgB,sBAAsB;IAE/B,KAAKrB,OAAO,CAACuB,iBAAiB;MAC5B,MAAMC,uBAAuB,GAAGvB,mBAAmB,CAACwB,eAAe,CACjEnB,MAAM,EACND,KACF,CAAC;MACD,OAAOmB,uBAAuB;IAEhC,KAAKxB,OAAO,CAAC0B,gBAAgB;MAC3B,MAAMC,sBAAsB,GAAG1B,mBAAmB,CAAC2B,cAAc,CAC/DtB,MAAM,EACND,KACF,CAAC;MACD,OAAOsB,sBAAsB;IAE/B,KAAK3B,OAAO,CAAC6B,mBAAmB;MAC9B,MAAMC,yBAAyB,GAAG7B,mBAAmB,CAAC8B,iBAAiB,CACrEzB,MAAM,EACND,KACF,CAAC;MACD,OAAOyB,yBAAyB;IAElC,KAAK9B,OAAO,CAACgC,gBAAgB;MAC3B,MAAMC,sBAAsB,GAAGhC,mBAAmB,CAACiC,cAAc,CAC/D5B,MAAM,EACND,KACF,CAAC;MACD,OAAO4B,sBAAsB;IAE/B,KAAKjC,OAAO,CAACmC,6BAA6B;MACxC,MAAMC,iCAAiC,GACrCnC,mBAAmB,CAACoC,wBAAwB,CAAC/B,MAAM,EAAED,KAAK,CAAC;MAC7D,OAAO+B,iCAAiC;IAE1C,KAAKpC,OAAO,CAACsC,qBAAqB;MAChC,MAAMC,0BAA0B,GAAGtC,mBAAmB,CAACuC,kBAAkB,CACvElC,MAAM,EACND,KACF,CAAC;MACD,OAAOkC,0BAA0B;IAEnC,KAAKvC,OAAO,CAACyC,+BAA+B;MAC1C,MAAMC,kCAAkC,GACtCzC,mBAAmB,CAAC0C,0BAA0B,CAACrC,MAAM,EAAED,KAAK,CAAC;MAC/D,OAAOqC,kCAAkC;IAE3C;MACE,OAAOrC,KAAK;EAChB;AACF,CAAC;AAED,eAAeD,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module"}