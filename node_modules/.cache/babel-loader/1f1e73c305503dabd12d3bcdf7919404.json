{"ast":null,"code":"var _jsxFileName = \"/Users/vishwajeetpatil/Desktop/git/sudosolver/src/containers/Sudoku/Sudoku.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport * as classes from \"./Sudoku.module.css\";\nimport Cell from \"../../components/Cell/Cell\";\nimport * as sudokuActions from \"../../store/actions/sudokuActions\";\nimport * as appUIactions from \"../../store/actions/appUIactions\";\nimport SudokuBoxes from \"./SudokuBoxes/SudokuBoxes\";\nimport * as helpers from \"../../helpers/helpers\";\nimport Feedback from \"../../components/Feedback/Feedback\";\nimport GameRules from \"../../components/GameRules/GameRules\";\nimport PropTypes from \"prop-types\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Sudoku = props => {\n  _s();\n  const [showFeedbackComp, setShowFeedbackComp] = useState(false);\n\n  // Function to check for repeated numbers in rows and columns\n  const checkForRepeatedNumbersInRowsAndColumns = () => {\n    const repeatedNumbersInRows = generateRepeatedNumbersInRows(props.sudokuState);\n    const repeatedNumbersInColumns = generateRepeatedNumbersInColumns(props.sudokuState);\n    const repeatedNumbers = [...new Set([...repeatedNumbersInRows, ...repeatedNumbersInColumns])];\n\n    // Checks if sudoku is solved\n    checkIfSudokuIsSolved(repeatedNumbersInRows, repeatedNumbersInColumns, repeatedNumbers);\n    props.setInvalidNumbers(repeatedNumbers);\n  };\n\n  // useEffect to run when props.isAnyCellJustUpdated changes\n  useEffect(() => {\n    checkForRepeatedNumbersInRowsAndColumns();\n  }, [props.isAnyCellJustUpdated, checkForRepeatedNumbersInRowsAndColumns]);\n\n  // useEffect to update showFeedbackComp based on state changes\n  useEffect(() => {\n    setShowFeedbackComp(props.isSudokuSolved || props.doesUserInputtedPuzzleHaveError);\n  }, [props.isSudokuSolved, props.doesUserInputtedPuzzleHaveError]);\n\n  // Function to generate repeated numbers in rows\n  const generateRepeatedNumbersInRows = state => {\n    let repeatedNumbersArr = [];\n    let repeatedNumbersRows = [];\n    state.forEach((row, index) => {\n      const allNumberCounter = [{\n        val: 1,\n        count: 0\n      }, {\n        val: 2,\n        count: 0\n      }, {\n        val: 3,\n        count: 0\n      }, {\n        val: 4,\n        count: 0\n      }, {\n        val: 5,\n        count: 0\n      }, {\n        val: 6,\n        count: 0\n      }, {\n        val: 7,\n        count: 0\n      }, {\n        val: 8,\n        count: 0\n      }, {\n        val: 9,\n        count: 0\n      }];\n      row.forEach((cell, i) => {\n        // Guard clause\n        if (cell === null) return;\n        const currentIndex = allNumberCounter.findIndex(el => el.val === cell);\n        if (currentIndex !== -1) {\n          const newCounterEl = {\n            val: cell,\n            count: allNumberCounter[currentIndex].count + 1\n          };\n          allNumberCounter[currentIndex] = newCounterEl;\n        }\n      });\n      const repeatNums = [];\n      const repeatedNumbersObj = allNumberCounter.filter(el => el.count > 1);\n      for (const num in repeatedNumbersObj) {\n        const repeatedNum = repeatedNumbersObj[num].val;\n        repeatNums.push(repeatedNum);\n        repeatedNumbersRows.push(index + 1);\n      }\n      repeatedNumbersArr = repeatedNumbersArr.concat(repeatNums);\n    });\n    props.setInvalidRows(repeatedNumbersRows);\n    return repeatedNumbersArr;\n  };\n\n  // Function to generate repeated numbers in columns\n  const generateRepeatedNumbersInColumns = state => {\n    let repeatedNumbersArr = [];\n    let repeatedNumbersColumns = [];\n    const transformedState = state.map((outer_el, outer_i, mainArr) => {\n      const columnFromRow = [];\n      outer_el.forEach((_, inner_i) => {\n        const newEl = mainArr[inner_i][outer_i];\n        columnFromRow.push(newEl);\n      });\n      return columnFromRow;\n    });\n    transformedState.forEach((row, index) => {\n      const allNumberCounter = [{\n        val: 1,\n        count: 0\n      }, {\n        val: 2,\n        count: 0\n      }, {\n        val: 3,\n        count: 0\n      }, {\n        val: 4,\n        count: 0\n      }, {\n        val: 5,\n        count: 0\n      }, {\n        val: 6,\n        count: 0\n      }, {\n        val: 7,\n        count: 0\n      }, {\n        val: 8,\n        count: 0\n      }, {\n        val: 9,\n        count: 0\n      }];\n      row.forEach((cell, i) => {\n        // Guard clause\n        if (cell === null) return;\n        const currentIndex = allNumberCounter.findIndex(el => el.val === cell);\n        if (currentIndex !== -1) {\n          const newCounterEl = {\n            val: cell,\n            count: allNumberCounter[currentIndex].count + 1\n          };\n          allNumberCounter[currentIndex] = newCounterEl;\n        }\n      });\n      const repeatNums = [];\n      const repeatedNumbersObj = allNumberCounter.filter(el => el.count > 1);\n      for (const num in repeatedNumbersObj) {\n        const repeatedNum = repeatedNumbersObj[num].val;\n        repeatedNumbersColumns.push(index + 1);\n        repeatNums.push(repeatedNum);\n      }\n      repeatedNumbersArr = repeatedNumbersArr.concat(repeatNums);\n    });\n    props.setInvalidColumns(repeatedNumbersColumns);\n    return repeatedNumbersArr;\n  };\n\n  // Function to handle cell focus\n  const cellFocusHandler = (row, column) => {\n    props.setActivateCellState(row, column);\n  };\n\n  // Function to check if sudoku is solved\n  const checkIfSudokuIsSolved = (invalidRows, invalidColumns, invalidNumbers) => {\n    const sudokuState = [...props.sudokuState];\n    const flatSudokuState = sudokuState.flat();\n    const isAllCellsCompletelyFilled = !flatSudokuState.includes(null);\n    const isThereNoInvalidRow = !Boolean(invalidRows.length);\n    const isThereNoInvalidColumn = !Boolean(invalidColumns.length);\n    const isThereNoInvalidNumber = !Boolean(invalidNumbers.length);\n    const isSudokuSolved = isAllCellsCompletelyFilled && isThereNoInvalidRow && isThereNoInvalidColumn && isThereNoInvalidNumber;\n    if (isSudokuSolved) {\n      props.setSudokuStateToSolved();\n    }\n  };\n  const styleClasses = [classes.Sudoku];\n  if (props.isSudokuSolved) {\n    styleClasses.push(classes.Solved);\n  }\n\n  // Function to hide feedback component\n  const hideFeedbackComp = () => {\n    setShowFeedbackComp(false);\n  };\n\n  // Rendering Sudoku component\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styleClasses.join(\" \"),\n    children: [/*#__PURE__*/_jsxDEV(GameRules, {\n      show: props.showGameRules\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SudokuBoxes, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.Content,\n      children: props.sudokuState.flat().map((el, i) => {\n        const row = Math.floor(i / 9) + 1;\n        const column = (i + 1) % 9 === 0 ? 9 : (i + 1) % 9;\n        const boxNumber = helpers.generateBoxNumber(row, column);\n        const isInvalidInRowOrColumn = props.invalidNumbersArr.includes(el) && (props.invalidRows.includes(row) || props.invalidColumns.includes(column));\n        const isInvalidInBox = props.invalidBoxesArr.includes(boxNumber) && props.invalidBoxesNumbersArr.includes(el);\n        return /*#__PURE__*/_jsxDEV(Cell, {\n          value: el,\n          cellFocusHandler: cellFocusHandler,\n          row: row,\n          column: column,\n          isInvalid: isInvalidInRowOrColumn || isInvalidInBox,\n          isDefault: props.defaultCellCoordinates.some(el => el[0] === row && el[1] === column),\n          active: row === props.activeCell.row && column === props.activeCell.column\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 7\n    }, this), showFeedbackComp ? /*#__PURE__*/_jsxDEV(Feedback, {\n      show: true,\n      type: props.isSudokuSolved ? \"success\" : \"danger\",\n      message: props.isSudokuSolved ? \"Solved\" : \"That's not solvable. Valid Sudoku don't contain error. Fix errors and try again\",\n      unmountMe: hideFeedbackComp\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 9\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 199,\n    columnNumber: 5\n  }, this);\n};\n_s(Sudoku, \"jsG4m+MTO8INd0458/ofx3EMv8o=\");\n_c = Sudoku;\nconst mapStateToProps = state => {\n  return {\n    // app UI reducer\n    showGameRules: state.appUI.showGameRules,\n    activeCell: state.appUI.activeCell,\n    // sudoku reducer\n    sudokuState: state.sudoku.sudokuState,\n    invalidNumbersArr: state.sudoku.invalidNumbersArr,\n    isAnyCellJustUpdated: state.sudoku.isAnyCellJustUpdated,\n    invalidRows: state.sudoku.invalidRowsArr,\n    invalidColumns: state.sudoku.invalidColumnsArr,\n    invalidBoxesArr: state.sudoku.invalidBoxesArr,\n    invalidBoxesNumbersArr: state.sudoku.invalidBoxesNumbersArr,\n    allValuesAreDefault: state.sudoku.allValuesAreDefault,\n    defaultCellCoordinates: state.sudoku.defaultCellCoordinates,\n    isSudokuSolved: state.sudoku.isSudokuSolved,\n    doesUserInputtedPuzzleHaveError: state.sudoku.doesUserInputtedPuzzleHaveError,\n    isUserInputtedPuzzleSolvable: state.sudoku.isUserInputtedPuzzleSolvable,\n    isUserInputtedPuzzleSolved: state.sudoku.isUserInputtedPuzzleSolved\n  };\n};\nconst mapDispatchToProps = dispatch => {\n  return {\n    setActivateCellState: (row, column) => dispatch(appUIactions.setACtiveCellState(row, column)),\n    setInvalidNumbers: invalidNumbersArr => dispatch(sudokuActions.setInvalidCells(invalidNumbersArr)),\n    setInvalidRows: invalidRows => dispatch(sudokuActions.setInvalidRows(invalidRows)),\n    setInvalidColumns: invalidColumns => dispatch(sudokuActions.setInvalidColumns(invalidColumns)),\n    setSudokuStateToSolved: () => dispatch(sudokuActions.sudokuIsSolved())\n  };\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Sudoku);\nCell.propTypes = {\n  showGameRules: PropTypes.bool,\n  activeCell: PropTypes.object,\n  // sudoku reducer\n  sudokuState: PropTypes.array,\n  invalidNumbersArr: PropTypes.array,\n  isAnyCellJustUpdated: PropTypes.any,\n  invalidRows: PropTypes.array,\n  invalidColumns: PropTypes.array,\n  invalidBoxesArr: PropTypes.array,\n  invalidBoxesNumbersArr: PropTypes.array,\n  allValuesAreDefault: PropTypes.bool,\n  defaultCellCoordinates: PropTypes.array,\n  isSudokuSolved: PropTypes.bool,\n  doesUserInputtedPuzzleHaveError: PropTypes.bool,\n  isUserInputtedPuzzleSolvable: PropTypes.bool,\n  isUserInputtedPuzzleSolved: PropTypes.bool,\n  setActivateCellState: PropTypes.func,\n  setInvalidNumbers: PropTypes.func,\n  setInvalidRows: PropTypes.func,\n  setInvalidColumns: PropTypes.func,\n  setSudokuStateToSolved: PropTypes.func\n};\nvar _c;\n$RefreshReg$(_c, \"Sudoku\");","map":{"version":3,"names":["React","useState","useEffect","connect","classes","Cell","sudokuActions","appUIactions","SudokuBoxes","helpers","Feedback","GameRules","PropTypes","jsxDEV","_jsxDEV","Sudoku","props","_s","showFeedbackComp","setShowFeedbackComp","checkForRepeatedNumbersInRowsAndColumns","repeatedNumbersInRows","generateRepeatedNumbersInRows","sudokuState","repeatedNumbersInColumns","generateRepeatedNumbersInColumns","repeatedNumbers","Set","checkIfSudokuIsSolved","setInvalidNumbers","isAnyCellJustUpdated","isSudokuSolved","doesUserInputtedPuzzleHaveError","state","repeatedNumbersArr","repeatedNumbersRows","forEach","row","index","allNumberCounter","val","count","cell","i","currentIndex","findIndex","el","newCounterEl","repeatNums","repeatedNumbersObj","filter","num","repeatedNum","push","concat","setInvalidRows","repeatedNumbersColumns","transformedState","map","outer_el","outer_i","mainArr","columnFromRow","_","inner_i","newEl","setInvalidColumns","cellFocusHandler","column","setActivateCellState","invalidRows","invalidColumns","invalidNumbers","flatSudokuState","flat","isAllCellsCompletelyFilled","includes","isThereNoInvalidRow","Boolean","length","isThereNoInvalidColumn","isThereNoInvalidNumber","setSudokuStateToSolved","styleClasses","Solved","hideFeedbackComp","className","join","children","show","showGameRules","fileName","_jsxFileName","lineNumber","columnNumber","Content","Math","floor","boxNumber","generateBoxNumber","isInvalidInRowOrColumn","invalidNumbersArr","isInvalidInBox","invalidBoxesArr","invalidBoxesNumbersArr","value","isInvalid","isDefault","defaultCellCoordinates","some","active","activeCell","type","message","unmountMe","_c","mapStateToProps","appUI","sudoku","invalidRowsArr","invalidColumnsArr","allValuesAreDefault","isUserInputtedPuzzleSolvable","isUserInputtedPuzzleSolved","mapDispatchToProps","dispatch","setACtiveCellState","setInvalidCells","sudokuIsSolved","propTypes","bool","object","array","any","func","$RefreshReg$"],"sources":["/Users/vishwajeetpatil/Desktop/git/sudosolver/src/containers/Sudoku/Sudoku.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport * as classes from \"./Sudoku.module.css\";\nimport Cell from \"../../components/Cell/Cell\";\nimport * as sudokuActions from \"../../store/actions/sudokuActions\";\nimport * as appUIactions from \"../../store/actions/appUIactions\";\nimport SudokuBoxes from \"./SudokuBoxes/SudokuBoxes\";\nimport * as helpers from \"../../helpers/helpers\";\nimport Feedback from \"../../components/Feedback/Feedback\";\nimport GameRules from \"../../components/GameRules/GameRules\";\n\nimport PropTypes from \"prop-types\";\n\nconst Sudoku = (props) => {\n  const [showFeedbackComp, setShowFeedbackComp] = useState(false);\n\n  // Function to check for repeated numbers in rows and columns\n  const checkForRepeatedNumbersInRowsAndColumns = () => {\n    const repeatedNumbersInRows = generateRepeatedNumbersInRows(\n      props.sudokuState\n    );\n    const repeatedNumbersInColumns = generateRepeatedNumbersInColumns(\n      props.sudokuState\n    );\n    const repeatedNumbers = [\n      ...new Set([...repeatedNumbersInRows, ...repeatedNumbersInColumns]),\n    ];\n\n    // Checks if sudoku is solved\n    checkIfSudokuIsSolved(\n      repeatedNumbersInRows,\n      repeatedNumbersInColumns,\n      repeatedNumbers\n    );\n\n    props.setInvalidNumbers(repeatedNumbers);\n  };\n\n  // useEffect to run when props.isAnyCellJustUpdated changes\n  useEffect(() => {\n    checkForRepeatedNumbersInRowsAndColumns();\n  }, [props.isAnyCellJustUpdated, checkForRepeatedNumbersInRowsAndColumns]);\n\n  // useEffect to update showFeedbackComp based on state changes\n  useEffect(() => {\n    setShowFeedbackComp(\n      props.isSudokuSolved || props.doesUserInputtedPuzzleHaveError\n    );\n  }, [props.isSudokuSolved, props.doesUserInputtedPuzzleHaveError]);\n\n  // Function to generate repeated numbers in rows\n  const generateRepeatedNumbersInRows = (state) => {\n    let repeatedNumbersArr = [];\n    let repeatedNumbersRows = [];\n    state.forEach((row, index) => {\n      const allNumberCounter = [\n        { val: 1, count: 0 },\n        { val: 2, count: 0 },\n        { val: 3, count: 0 },\n        { val: 4, count: 0 },\n        { val: 5, count: 0 },\n        { val: 6, count: 0 },\n        { val: 7, count: 0 },\n        { val: 8, count: 0 },\n        { val: 9, count: 0 },\n      ];\n\n      row.forEach((cell, i) => {\n        // Guard clause\n        if (cell === null) return;\n        const currentIndex = allNumberCounter.findIndex(\n          (el) => el.val === cell\n        );\n\n        if (currentIndex !== -1) {\n          const newCounterEl = {\n            val: cell,\n            count: allNumberCounter[currentIndex].count + 1,\n          };\n          allNumberCounter[currentIndex] = newCounterEl;\n        }\n      });\n\n      const repeatNums = [];\n      const repeatedNumbersObj = allNumberCounter.filter((el) => el.count > 1);\n\n      for (const num in repeatedNumbersObj) {\n        const repeatedNum = repeatedNumbersObj[num].val;\n        repeatNums.push(repeatedNum);\n        repeatedNumbersRows.push(index + 1);\n      }\n\n      repeatedNumbersArr = repeatedNumbersArr.concat(repeatNums);\n    });\n\n    props.setInvalidRows(repeatedNumbersRows);\n    return repeatedNumbersArr;\n  };\n\n  // Function to generate repeated numbers in columns\n  const generateRepeatedNumbersInColumns = (state) => {\n    let repeatedNumbersArr = [];\n    let repeatedNumbersColumns = [];\n    const transformedState = state.map((outer_el, outer_i, mainArr) => {\n      const columnFromRow = [];\n      outer_el.forEach((_, inner_i) => {\n        const newEl = mainArr[inner_i][outer_i];\n        columnFromRow.push(newEl);\n      });\n      return columnFromRow;\n    });\n\n    transformedState.forEach((row, index) => {\n      const allNumberCounter = [\n        { val: 1, count: 0 },\n        { val: 2, count: 0 },\n        { val: 3, count: 0 },\n        { val: 4, count: 0 },\n        { val: 5, count: 0 },\n        { val: 6, count: 0 },\n        { val: 7, count: 0 },\n        { val: 8, count: 0 },\n        { val: 9, count: 0 },\n      ];\n\n      row.forEach((cell, i) => {\n        // Guard clause\n        if (cell === null) return;\n        const currentIndex = allNumberCounter.findIndex(\n          (el) => el.val === cell\n        );\n\n        if (currentIndex !== -1) {\n          const newCounterEl = {\n            val: cell,\n            count: allNumberCounter[currentIndex].count + 1,\n          };\n          allNumberCounter[currentIndex] = newCounterEl;\n        }\n      });\n\n      const repeatNums = [];\n      const repeatedNumbersObj = allNumberCounter.filter((el) => el.count > 1);\n\n      for (const num in repeatedNumbersObj) {\n        const repeatedNum = repeatedNumbersObj[num].val;\n        repeatedNumbersColumns.push(index + 1);\n        repeatNums.push(repeatedNum);\n      }\n\n      repeatedNumbersArr = repeatedNumbersArr.concat(repeatNums);\n    });\n\n    props.setInvalidColumns(repeatedNumbersColumns);\n    return repeatedNumbersArr;\n  };\n\n  // Function to handle cell focus\n  const cellFocusHandler = (row, column) => {\n    props.setActivateCellState(row, column);\n  };\n\n  // Function to check if sudoku is solved\n  const checkIfSudokuIsSolved = (\n    invalidRows,\n    invalidColumns,\n    invalidNumbers\n  ) => {\n    const sudokuState = [...props.sudokuState];\n    const flatSudokuState = sudokuState.flat();\n    const isAllCellsCompletelyFilled = !flatSudokuState.includes(null);\n    const isThereNoInvalidRow = !Boolean(invalidRows.length);\n    const isThereNoInvalidColumn = !Boolean(invalidColumns.length);\n    const isThereNoInvalidNumber = !Boolean(invalidNumbers.length);\n    const isSudokuSolved =\n      isAllCellsCompletelyFilled &&\n      isThereNoInvalidRow &&\n      isThereNoInvalidColumn &&\n      isThereNoInvalidNumber;\n\n    if (isSudokuSolved) {\n      props.setSudokuStateToSolved();\n    }\n  };\n\n  const styleClasses = [classes.Sudoku];\n\n  if (props.isSudokuSolved) {\n    styleClasses.push(classes.Solved);\n  }\n\n  // Function to hide feedback component\n  const hideFeedbackComp = () => {\n    setShowFeedbackComp(false);\n  };\n\n  // Rendering Sudoku component\n  return (\n    <div className={styleClasses.join(\" \")}>\n      <GameRules show={props.showGameRules} />\n      <SudokuBoxes />\n\n      {/* Sudoku logic */}\n      <div className={classes.Content}>\n        {props.sudokuState.flat().map((el, i) => {\n          const row = Math.floor(i / 9) + 1;\n          const column = (i + 1) % 9 === 0 ? 9 : (i + 1) % 9;\n          const boxNumber = helpers.generateBoxNumber(row, column);\n\n          const isInvalidInRowOrColumn =\n            props.invalidNumbersArr.includes(el) &&\n            (props.invalidRows.includes(row) ||\n              props.invalidColumns.includes(column));\n          const isInvalidInBox =\n            props.invalidBoxesArr.includes(boxNumber) &&\n            props.invalidBoxesNumbersArr.includes(el);\n\n          return (\n            <Cell\n              key={i}\n              value={el}\n              cellFocusHandler={cellFocusHandler}\n              row={row}\n              column={column}\n              isInvalid={isInvalidInRowOrColumn || isInvalidInBox}\n              isDefault={props.defaultCellCoordinates.some(\n                (el) => el[0] === row && el[1] === column\n              )}\n              active={\n                row === props.activeCell.row &&\n                column === props.activeCell.column\n              }\n            />\n          );\n        })}\n      </div>\n\n      {/* Feedback component */}\n      {showFeedbackComp ? (\n        <Feedback\n          show={true}\n          type={props.isSudokuSolved ? \"success\" : \"danger\"}\n          message={\n            props.isSudokuSolved\n              ? \"Solved\"\n              : \"That's not solvable. Valid Sudoku don't contain error. Fix errors and try again\"\n          }\n          unmountMe={hideFeedbackComp}\n        />\n      ) : null}\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    // app UI reducer\n    showGameRules: state.appUI.showGameRules,\n    activeCell: state.appUI.activeCell,\n\n    // sudoku reducer\n    sudokuState: state.sudoku.sudokuState,\n    invalidNumbersArr: state.sudoku.invalidNumbersArr,\n    isAnyCellJustUpdated: state.sudoku.isAnyCellJustUpdated,\n    invalidRows: state.sudoku.invalidRowsArr,\n    invalidColumns: state.sudoku.invalidColumnsArr,\n    invalidBoxesArr: state.sudoku.invalidBoxesArr,\n    invalidBoxesNumbersArr: state.sudoku.invalidBoxesNumbersArr,\n    allValuesAreDefault: state.sudoku.allValuesAreDefault,\n    defaultCellCoordinates: state.sudoku.defaultCellCoordinates,\n    isSudokuSolved: state.sudoku.isSudokuSolved,\n\n    doesUserInputtedPuzzleHaveError:\n      state.sudoku.doesUserInputtedPuzzleHaveError,\n    isUserInputtedPuzzleSolvable: state.sudoku.isUserInputtedPuzzleSolvable,\n    isUserInputtedPuzzleSolved: state.sudoku.isUserInputtedPuzzleSolved,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    setActivateCellState: (row, column) =>\n      dispatch(appUIactions.setACtiveCellState(row, column)),\n    setInvalidNumbers: (invalidNumbersArr) =>\n      dispatch(sudokuActions.setInvalidCells(invalidNumbersArr)),\n    setInvalidRows: (invalidRows) =>\n      dispatch(sudokuActions.setInvalidRows(invalidRows)),\n    setInvalidColumns: (invalidColumns) =>\n      dispatch(sudokuActions.setInvalidColumns(invalidColumns)),\n    setSudokuStateToSolved: () => dispatch(sudokuActions.sudokuIsSolved()),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Sudoku);\n\nCell.propTypes = {\n  showGameRules: PropTypes.bool,\n  activeCell: PropTypes.object,\n\n  // sudoku reducer\n  sudokuState: PropTypes.array,\n  invalidNumbersArr: PropTypes.array,\n  isAnyCellJustUpdated: PropTypes.any,\n  invalidRows: PropTypes.array,\n  invalidColumns: PropTypes.array,\n  invalidBoxesArr: PropTypes.array,\n  invalidBoxesNumbersArr: PropTypes.array,\n  allValuesAreDefault: PropTypes.bool,\n  defaultCellCoordinates: PropTypes.array,\n  isSudokuSolved: PropTypes.bool,\n  doesUserInputtedPuzzleHaveError: PropTypes.bool,\n  isUserInputtedPuzzleSolvable: PropTypes.bool,\n  isUserInputtedPuzzleSolved: PropTypes.bool,\n\n  setActivateCellState: PropTypes.func,\n  setInvalidNumbers: PropTypes.func,\n  setInvalidRows: PropTypes.func,\n  setInvalidColumns: PropTypes.func,\n  setSudokuStateToSolved: PropTypes.func,\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}