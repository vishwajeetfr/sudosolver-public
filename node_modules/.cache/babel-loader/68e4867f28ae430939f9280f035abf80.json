{"ast":null,"code":"import { generatePuzzleAndSolvedPuzzle, solvePuzzleFromUserInputtedPuzzle } from \"../helpers/helpers\";\nexport const defaultState = {\n  sudokuState: [[null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null]],\n  solvedState: null,\n  invalidNumbersArr: [],\n  invalidRowsArr: [],\n  invalidColumnsArr: [],\n  invalidBoxesArr: [],\n  invalidBoxesNumbersArr: [],\n  // isAnyCellJustUpdated switches between \"foo\" and \"bar\" just to signal a change\n  isAnyCellJustUpdated: \"foo\",\n  defaultCellCoordinates: [\n    // a coordinate is given as [row, column]\n  ],\n  isSudokuSolved: false,\n  difficulty: null,\n  doesUserInputtedPuzzleHaveError: false,\n  isUserInputtedPuzzleSolvable: true,\n  isUserInputtedPuzzleSolved: false,\n  currentMode: null\n};\nexport const setGameMode = (action, state) => {\n  return {\n    ...state,\n    currentMode: action.payload.mode,\n    // Setting the rest to default - initting the game\n    invalidNumbersArr: [],\n    invalidRowsArr: [],\n    invalidColumnsArr: [],\n    invalidBoxesArr: [],\n    invalidBoxesNumbersArr: [],\n    isAnyCellJustUpdated: \"foo\",\n    isSudokuSolved: false,\n    difficulty: state.difficulty,\n    doesUserInputtedPuzzleHaveError: false,\n    isUserInputtedPuzzleSolvable: true,\n    isUserInputtedPuzzleSolved: false\n  };\n};\nexport const setDifficulty = (action, state) => {\n  const difficulty = action.payload.difficulty;\n  return {\n    ...state,\n    difficulty: difficulty\n  };\n};\nexport const setPuzzleAndSolvedPuzzle = (action, state) => {\n  const generatedPuzzleAndSolvedPuzzle = generatePuzzleAndSolvedPuzzle(state.difficulty);\n  const generatedPuzzle = generatedPuzzleAndSolvedPuzzle.puzzle;\n  const generatedSolvedPuzzle = generatedPuzzleAndSolvedPuzzle.solvedPuzzle;\n  const defaultCellCoords = [];\n  generatedPuzzle.forEach((outer_el, outer_idx, outer_arr) => {\n    outer_el.forEach((inner_el, inner_idx, inner_arr) => {\n      // console.log(inner_el);\n\n      if (inner_el === null) return;\n      const row = outer_idx + 1;\n      const column = inner_idx + 1;\n      defaultCellCoords.push([row, column]);\n    });\n  });\n  return {\n    ...state,\n    sudokuState: generatedPuzzle,\n    solvedState: generatedSolvedPuzzle,\n    defaultCellCoordinates: defaultCellCoords,\n    invalidRowsArr: [],\n    invalidColumnsArr: [],\n    invalidNumbersArr: [],\n    isSudokuSolved: false\n  };\n};\nexport const solvePuzzle = (action, state) => {\n  //   if (state.solvedState === null) alert(\"No solved state available\");\n\n  const allCellCoords = [];\n  state.solvedState.forEach((outer_el, outer_idx, outer_arr) => {\n    outer_el.forEach((inner_el, inner_idx, inner_arr) => {\n      // console.log(inner_el);\n\n      if (inner_el === null) return;\n      const row = outer_idx + 1;\n      const column = inner_idx + 1;\n      allCellCoords.push([row, column]);\n    });\n  });\n  return {\n    ...state,\n    sudokuState: state.solvedState,\n    invalidRowsArr: [],\n    invalidColumnsArr: [],\n    invalidNumbersArr: [],\n    isSudokuSolved: true,\n    defaultCellCoordinates: allCellCoords\n  };\n};\nexport const setSudokuState = (action, state) => {\n  const newState = state.sudokuState.map((el, i) => {\n    if (i === action.payload.row - 1) {\n      const newRow = el.map((el, i) => {\n        if (i === action.payload.column - 1) {\n          // console.log(\"Yayyyy\");\n          return action.payload.value;\n        } else return el;\n      });\n      // console.log(newRow);\n      return newRow;\n    } else return el;\n  });\n  return {\n    ...state,\n    sudokuState: newState,\n    isAnyCellJustUpdated: state.isAnyCellJustUpdated === \"foo\" ? \"bar\" : \"foo\"\n  };\n};\nexport const setInvalidCells = (action, state) => {\n  const newInvalidNumbers = [...action.payload.invalidNumbersArr];\n  return {\n    ...state,\n    invalidNumbersArr: newInvalidNumbers\n    // doesUserInputtedPuzzleHaveError: true,\n  };\n};\nexport const setInvalidRows = (action, state) => {\n  return {\n    ...state,\n    invalidRowsArr: [...action.payload.invalidRows],\n    isSudokuSolved: false\n  };\n};\nexport const setInvalidColumns = (action, state) => {\n  return {\n    ...state,\n    invalidColumnsArr: [...action.payload.invalidColumns],\n    isSudokuSolved: false\n  };\n};\nexport const sudokuIsSolved = (action, state) => {\n  return {\n    ...state,\n    isSudokuSolved: true\n  };\n};\nexport const setInvalidBoesAndNumbers = (action, state) => {\n  const invalidBoxes = action.payload.invalidBoxesArr;\n  const invalidNumbers = action.payload.invalidNumbersArr;\n  return {\n    ...state,\n    invalidBoxesArr: invalidBoxes,\n    invalidBoxesNumbersArr: invalidNumbers\n  };\n};\nexport const solveSudokuForUser = (action, state) => {\n  const isInvalidNumbersArrEmpty = state.invalidNumbersArr.length === 0;\n  const isInvalidRowsArrEmpty = state.invalidRowsArr.length === 0;\n  const isInvalidColumnsArrEmpty = state.invalidColumnsArr.length === 0;\n  const isInvalidBoxesArrEmpty = state.invalidBoxesArr.length === 0;\n  const isInvalidBoxesNumbersArrEmpty = state.invalidBoxesNumbersArr.length === 0;\n  const noErrors = isInvalidNumbersArrEmpty && isInvalidRowsArrEmpty && isInvalidColumnsArrEmpty && isInvalidBoxesArrEmpty && isInvalidBoxesNumbersArrEmpty;\n  const attemptedSolvedState = solvePuzzleFromUserInputtedPuzzle(state.sudokuState);\n  if (!noErrors) {\n    return {\n      ...state,\n      doesUserInputtedPuzzleHaveError: true,\n      isUserInputtedPuzzleSolvable: false,\n      isUserInputtedPuzzleSolved: false\n    };\n  } else if (attemptedSolvedState === null) {\n    console.log(\"Not solvable\");\n    return {\n      ...state,\n      isUserInputtedPuzzleSolvable: false,\n      isUserInputtedPuzzleSolved: false,\n      doesUserInputtedPuzzleHaveError: false\n    };\n  } else {\n    // console.log(\"Solved\");\n    const allCellCoordsArr = [];\n    attemptedSolvedState.forEach((outer_el, outer_idx, outer_arr) => {\n      outer_el.forEach((inner_el, inner_idx, inner_arr) => {\n        // console.log(inner_el);\n\n        if (inner_el === null) return;\n        const row = outer_idx + 1;\n        const column = inner_idx + 1;\n        allCellCoordsArr.push([row, column]);\n      });\n    });\n    return {\n      ...state,\n      sudokuState: attemptedSolvedState,\n      isUserInputtedPuzzleSolvable: true,\n      isUserInputtedPuzzleSolved: true,\n      isSudokuSolved: true,\n      defaultCellCoordinates: allCellCoordsArr,\n      doesUserInputtedPuzzleHaveError: false\n    };\n  }\n};\nexport const initUserInputSUdokuToSolve = (action, state) => {\n  const defaultSudokuState = [[null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null]];\n  return {\n    ...state,\n    sudokuState: defaultSudokuState,\n    defaultCellCoordinates: [],\n    isSudokuSolved: false\n  };\n};","map":{"version":3,"names":["generatePuzzleAndSolvedPuzzle","solvePuzzleFromUserInputtedPuzzle","defaultState","sudokuState","solvedState","invalidNumbersArr","invalidRowsArr","invalidColumnsArr","invalidBoxesArr","invalidBoxesNumbersArr","isAnyCellJustUpdated","defaultCellCoordinates","isSudokuSolved","difficulty","doesUserInputtedPuzzleHaveError","isUserInputtedPuzzleSolvable","isUserInputtedPuzzleSolved","currentMode","setGameMode","action","state","payload","mode","setDifficulty","setPuzzleAndSolvedPuzzle","generatedPuzzleAndSolvedPuzzle","generatedPuzzle","puzzle","generatedSolvedPuzzle","solvedPuzzle","defaultCellCoords","forEach","outer_el","outer_idx","outer_arr","inner_el","inner_idx","inner_arr","row","column","push","solvePuzzle","allCellCoords","setSudokuState","newState","map","el","i","newRow","value","setInvalidCells","newInvalidNumbers","setInvalidRows","invalidRows","setInvalidColumns","invalidColumns","sudokuIsSolved","setInvalidBoesAndNumbers","invalidBoxes","invalidNumbers","solveSudokuForUser","isInvalidNumbersArrEmpty","length","isInvalidRowsArrEmpty","isInvalidColumnsArrEmpty","isInvalidBoxesArrEmpty","isInvalidBoxesNumbersArrEmpty","noErrors","attemptedSolvedState","console","log","allCellCoordsArr","initUserInputSUdokuToSolve","defaultSudokuState"],"sources":["/Users/vishwajeetpatil/Desktop/sudosolver-master/src/helpers/sudokuReducerHelper.js"],"sourcesContent":["import {\n  generatePuzzleAndSolvedPuzzle,\n  solvePuzzleFromUserInputtedPuzzle,\n} from \"../helpers/helpers\";\n\nexport const defaultState = {\n  sudokuState: [\n    [null, null, null, null, null, null, null, null, null],\n    [null, null, null, null, null, null, null, null, null],\n    [null, null, null, null, null, null, null, null, null],\n    [null, null, null, null, null, null, null, null, null],\n    [null, null, null, null, null, null, null, null, null],\n    [null, null, null, null, null, null, null, null, null],\n    [null, null, null, null, null, null, null, null, null],\n    [null, null, null, null, null, null, null, null, null],\n    [null, null, null, null, null, null, null, null, null],\n  ],\n  solvedState: null,\n  invalidNumbersArr: [],\n  invalidRowsArr: [],\n  invalidColumnsArr: [],\n  invalidBoxesArr: [],\n  invalidBoxesNumbersArr: [],\n  // isAnyCellJustUpdated switches between \"foo\" and \"bar\" just to signal a change\n  isAnyCellJustUpdated: \"foo\",\n  defaultCellCoordinates: [\n    // a coordinate is given as [row, column]\n  ],\n  isSudokuSolved: false,\n  difficulty: null,\n  doesUserInputtedPuzzleHaveError: false,\n  isUserInputtedPuzzleSolvable: true,\n  isUserInputtedPuzzleSolved: false,\n  currentMode: null,\n};\n\nexport const setGameMode = (action, state) => {\n  return {\n    ...state,\n    currentMode: action.payload.mode,\n    // Setting the rest to default - initting the game\n    invalidNumbersArr: [],\n    invalidRowsArr: [],\n    invalidColumnsArr: [],\n    invalidBoxesArr: [],\n    invalidBoxesNumbersArr: [],\n    isAnyCellJustUpdated: \"foo\",\n    isSudokuSolved: false,\n    difficulty: state.difficulty,\n    doesUserInputtedPuzzleHaveError: false,\n    isUserInputtedPuzzleSolvable: true,\n    isUserInputtedPuzzleSolved: false,\n  };\n};\n\nexport const setDifficulty = (action, state) => {\n  const difficulty = action.payload.difficulty;\n  return {\n    ...state,\n    difficulty: difficulty,\n  };\n};\n\nexport const setPuzzleAndSolvedPuzzle = (action, state) => {\n  const generatedPuzzleAndSolvedPuzzle = generatePuzzleAndSolvedPuzzle(\n    state.difficulty\n  );\n  const generatedPuzzle = generatedPuzzleAndSolvedPuzzle.puzzle;\n  const generatedSolvedPuzzle = generatedPuzzleAndSolvedPuzzle.solvedPuzzle;\n\n  const defaultCellCoords = [];\n  generatedPuzzle.forEach((outer_el, outer_idx, outer_arr) => {\n    outer_el.forEach((inner_el, inner_idx, inner_arr) => {\n      // console.log(inner_el);\n\n      if (inner_el === null) return;\n      const row = outer_idx + 1;\n      const column = inner_idx + 1;\n      defaultCellCoords.push([row, column]);\n    });\n  });\n\n  return {\n    ...state,\n    sudokuState: generatedPuzzle,\n    solvedState: generatedSolvedPuzzle,\n    defaultCellCoordinates: defaultCellCoords,\n    invalidRowsArr: [],\n    invalidColumnsArr: [],\n    invalidNumbersArr: [],\n    isSudokuSolved: false,\n  };\n};\n\nexport const solvePuzzle = (action, state) => {\n  //   if (state.solvedState === null) alert(\"No solved state available\");\n\n  const allCellCoords = [];\n  state.solvedState.forEach((outer_el, outer_idx, outer_arr) => {\n    outer_el.forEach((inner_el, inner_idx, inner_arr) => {\n      // console.log(inner_el);\n\n      if (inner_el === null) return;\n      const row = outer_idx + 1;\n      const column = inner_idx + 1;\n      allCellCoords.push([row, column]);\n    });\n  });\n\n  return {\n    ...state,\n    sudokuState: state.solvedState,\n    invalidRowsArr: [],\n    invalidColumnsArr: [],\n    invalidNumbersArr: [],\n    isSudokuSolved: true,\n    defaultCellCoordinates: allCellCoords,\n  };\n};\n\nexport const setSudokuState = (action, state) => {\n  const newState = state.sudokuState.map((el, i) => {\n    if (i === action.payload.row - 1) {\n      const newRow = el.map((el, i) => {\n        if (i === action.payload.column - 1) {\n          // console.log(\"Yayyyy\");\n          return action.payload.value;\n        } else return el;\n      });\n      // console.log(newRow);\n      return newRow;\n    } else return el;\n  });\n\n  return {\n    ...state,\n    sudokuState: newState,\n    isAnyCellJustUpdated: state.isAnyCellJustUpdated === \"foo\" ? \"bar\" : \"foo\",\n  };\n};\n\nexport const setInvalidCells = (action, state) => {\n  const newInvalidNumbers = [...action.payload.invalidNumbersArr];\n  return {\n    ...state,\n    invalidNumbersArr: newInvalidNumbers,\n    // doesUserInputtedPuzzleHaveError: true,\n  };\n};\n\nexport const setInvalidRows = (action, state) => {\n  return {\n    ...state,\n    invalidRowsArr: [...action.payload.invalidRows],\n    isSudokuSolved: false,\n  };\n};\n\nexport const setInvalidColumns = (action, state) => {\n  return {\n    ...state,\n    invalidColumnsArr: [...action.payload.invalidColumns],\n    isSudokuSolved: false,\n  };\n};\n\nexport const sudokuIsSolved = (action, state) => {\n  return {\n    ...state,\n    isSudokuSolved: true,\n  };\n};\n\nexport const setInvalidBoesAndNumbers = (action, state) => {\n  const invalidBoxes = action.payload.invalidBoxesArr;\n  const invalidNumbers = action.payload.invalidNumbersArr;\n\n  return {\n    ...state,\n    invalidBoxesArr: invalidBoxes,\n    invalidBoxesNumbersArr: invalidNumbers,\n  };\n};\n\nexport const solveSudokuForUser = (action, state) => {\n  const isInvalidNumbersArrEmpty = state.invalidNumbersArr.length === 0;\n  const isInvalidRowsArrEmpty = state.invalidRowsArr.length === 0;\n  const isInvalidColumnsArrEmpty = state.invalidColumnsArr.length === 0;\n  const isInvalidBoxesArrEmpty = state.invalidBoxesArr.length === 0;\n  const isInvalidBoxesNumbersArrEmpty =\n    state.invalidBoxesNumbersArr.length === 0;\n\n  const noErrors =\n    isInvalidNumbersArrEmpty &&\n    isInvalidRowsArrEmpty &&\n    isInvalidColumnsArrEmpty &&\n    isInvalidBoxesArrEmpty &&\n    isInvalidBoxesNumbersArrEmpty;\n\n  const attemptedSolvedState = solvePuzzleFromUserInputtedPuzzle(\n    state.sudokuState\n  );\n\n  if (!noErrors) {\n    return {\n      ...state,\n      doesUserInputtedPuzzleHaveError: true,\n      isUserInputtedPuzzleSolvable: false,\n      isUserInputtedPuzzleSolved: false,\n    };\n  } else if (attemptedSolvedState === null) {\n    console.log(\"Not solvable\");\n\n    return {\n      ...state,\n      isUserInputtedPuzzleSolvable: false,\n      isUserInputtedPuzzleSolved: false,\n      doesUserInputtedPuzzleHaveError: false,\n    };\n  } else {\n    // console.log(\"Solved\");\n    const allCellCoordsArr = [];\n    attemptedSolvedState.forEach((outer_el, outer_idx, outer_arr) => {\n      outer_el.forEach((inner_el, inner_idx, inner_arr) => {\n        // console.log(inner_el);\n\n        if (inner_el === null) return;\n        const row = outer_idx + 1;\n        const column = inner_idx + 1;\n        allCellCoordsArr.push([row, column]);\n      });\n    });\n\n    return {\n      ...state,\n      sudokuState: attemptedSolvedState,\n      isUserInputtedPuzzleSolvable: true,\n      isUserInputtedPuzzleSolved: true,\n      isSudokuSolved: true,\n      defaultCellCoordinates: allCellCoordsArr,\n      doesUserInputtedPuzzleHaveError: false,\n    };\n  }\n};\n\nexport const initUserInputSUdokuToSolve = (action, state) => {\n  const defaultSudokuState = [\n    [null, null, null, null, null, null, null, null, null],\n    [null, null, null, null, null, null, null, null, null],\n    [null, null, null, null, null, null, null, null, null],\n    [null, null, null, null, null, null, null, null, null],\n    [null, null, null, null, null, null, null, null, null],\n    [null, null, null, null, null, null, null, null, null],\n    [null, null, null, null, null, null, null, null, null],\n    [null, null, null, null, null, null, null, null, null],\n    [null, null, null, null, null, null, null, null, null],\n  ];\n  return {\n    ...state,\n    sudokuState: defaultSudokuState,\n    defaultCellCoordinates: [],\n    isSudokuSolved: false,\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}