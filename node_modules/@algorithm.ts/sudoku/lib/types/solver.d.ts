import type { DLX } from '@algorithm.ts/dlx';
/**
 * Sudoku constraints.
 */
export declare enum SudokuConstraint {
    SLOT = 0,
    ROW = 1,
    COL = 2,
    SUB = 3
}
export interface SudokuSolverOptions {
    /**
     * Size of the child puzzle matrix (sqrt of original puzzle size)
     */
    readonly childMatrixSize: number;
}
export declare class SudokuSolver {
    readonly SUDOKU_SIZE_SQRT: number;
    readonly SUDOKU_SIZE: number;
    readonly SUDOKU_SIZE_SQUARE: number;
    readonly DL_TOTAL_COLUMNS: number;
    protected readonly constraints: number[];
    protected readonly segmentCodeMap: ReadonlyArray<number>;
    protected readonly dlx: DLX;
    constructor(options: SudokuSolverOptions);
    /**
     * Try to solve the given Sudoku problem, if there is a solution, fill the
     * solution into the incoming `solution` board.
     *
     * In particular, you can use the same two-dimensional array to pass in as the
     * `puzzle` and `solution` parameters respectively. If there is a solution,
     * the solution will still be filled into the passed `solution` array.
     *
     * If the `solution` parameter is not passed in, the solution will be
     * discarded, which is equivalent to only judging whether there is a solution.
     *
     * @param puzzle
     * @param solution
     * @returns Whether there is a solution
     * @public
     */
    solve(puzzle: ReadonlyArray<number[]>, solution: number[][] | null): boolean;
}
