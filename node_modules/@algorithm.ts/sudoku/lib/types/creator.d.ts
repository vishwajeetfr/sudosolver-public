import { SudokuSolver } from './solver';
import type { SudokuBoard, SudokuData } from './types';
export interface SudokuCreatorOptions {
    /**
     * Size of the child puzzle matrix (sqrt of original puzzle size)
     */
    readonly childMatrixSize: number;
    /**
     * The difficulty to solve the puzzle.
     * @default 0.2
     */
    difficulty?: number;
}
export declare class SudokuCreator {
    readonly SUDOKU_SIZE_SQRT: number;
    readonly SUDOKU_SIZE: number;
    readonly SUDOKU_SIZE_SQUARE: number;
    protected readonly solver: SudokuSolver;
    protected readonly segmentCodeMap: ReadonlyArray<number>;
    protected readonly gridCodes: number[];
    protected readonly candidates: number[];
    protected readonly visitedNums: boolean[];
    protected readonly tmpBoard: SudokuBoard;
    protected difficulty: number;
    constructor(options: SudokuCreatorOptions);
    /**
     * Create a sudoku game data.
     * @param _difficulty
     * @returns
     */
    createSudoku(_difficulty?: number): SudokuData;
    /**
     * Create a full-filled sudoku data.
     * @returns
     */
    protected createSolution(): number[][];
    /**
     * Create a sudoku puzzle that has only one unique solution.
     * @param solution
     * @returns
     */
    protected createPuzzle(solution: Readonly<SudokuBoard>): SudokuBoard;
    /**
     * Calculate which numbers can be filled in a specified grid (r,c) in the
     * Sudoku board.
     *
     * For the sake of saving memory space, the number candidates are stored in
     * this.candidates, and the function only returns the number of candidates.
     *
     * @param board
     * @param r
     * @param c
     */
    protected calcCandidates(board: Readonly<SudokuBoard>, r: number, c: number): number;
    /**
     * Resolve the value of difficulty.
     * @param _difficulty
     * @returns
     */
    protected resolveDifficulty(_difficulty: number): number;
}
